  event_record_subclass.cpp
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\filter.h(162): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\filter.h(180): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\filter.h(198): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
  Unknown compiler version - please run the configure tests and report the results
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(174): warning C4244: “=”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(216): warning C4244: “初始化”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(231): warning C4244: “=”: 从“ULONG64”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=DWORD
          ]
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(254): warning C4244: “=”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(274): warning C4244: “初始化”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(384): warning C4244: “参数”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(404): warning C4244: “参数”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(603): warning C4244: “初始化”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(689): warning C4244: “初始化”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(770): warning C4244: “初始化”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(903): warning C4244: “=”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(1463): warning C4244: “=”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(1542): warning C4244: “=”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(1617): warning C4244: “=”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(1693): warning C4244: “初始化”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(1777): warning C4244: “=”: 从“ULONG64”转换到“int”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(1789): warning C4244: “参数”: 从“ULONG64”转换到“int”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(1841): warning C4244: “=”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(2236): warning C4244: “初始化”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(2237): warning C4244: “初始化”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(2238): warning C4244: “初始化”: 从“ULONG64”转换到“DWORD”，可能丢失数据
d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\utility(172): warning C4244: “初始化”: 从“_Ty”转换到“_Ty1”，可能丢失数据
          with
          [
              _Ty=ULONG64
          ]
          and
          [
              _Ty1=DWORD
          ]
  d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(208): note: 参见对正在编译的函数 模板 实例化“std::pair<DWORD,DWORD>::pair<ULONG64,ULONG64,0>(_Other1 &&,_Other2 &&) noexcept”的引用
          with
          [
              _Other1=ULONG64,
              _Other2=ULONG64
          ]
  d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\event_record_subclass.cpp(208): note: 参见对正在编译的函数 模板 实例化“std::pair<DWORD,DWORD>::pair<ULONG64,ULONG64,0>(_Other1 &&,_Other2 &&) noexcept”的引用
          with
          [
              _Other1=ULONG64,
              _Other2=ULONG64
          ]
  d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\xtree(1792): note: 参见对正在编译的函数 模板 实例化“std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>>,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>>&,bool,0>(_Other1,_Other2 &&) noexcept”的引用
          with
          [
              _Ty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Other1=std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>> &,
              _Other2=bool
          ]
  d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\xtree(1792): note: 参见对正在编译的函数 模板 实例化“std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>>,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>>&,bool,0>(_Other1,_Other2 &&) noexcept”的引用
          with
          [
              _Ty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Other1=std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>> &,
              _Other2=bool
          ]
  d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\xtree(1726): note: 参见对正在编译的函数 模板 实例化“std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>>,bool> std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::_Insert_nohint<_Value_type&,_Nodety>(bool,_Valty,_Nodety)”的引用
          with
          [
              _Ty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Kty=String,
              _Pr=std::less<String>,
              _Alloc=std::allocator<std::string>,
              _Value_type=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Nodety=std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::_Default_allocator_traits<std::allocator<std::string>>::void_pointer> *,
              _Valty=std::basic_string<char,std::char_traits<char>,std::allocator<char>> &
          ]
  d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\xtree(1725): note: 参见对正在编译的函数 模板 实例化“std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>>,bool> std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::_Insert_nohint<_Value_type&,_Nodety>(bool,_Valty,_Nodety)”的引用
          with
          [
              _Ty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Kty=String,
              _Pr=std::less<String>,
              _Alloc=std::allocator<std::string>,
              _Value_type=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Nodety=std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::_Default_allocator_traits<std::allocator<std::string>>::void_pointer> *,
              _Valty=std::basic_string<char,std::char_traits<char>,std::allocator<char>> &
          ]
  d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\xtree(1163): note: 参见对正在编译的函数 模板 实例化“std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>> std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::_Insert_hint<_Value_type&,std::_Tree_node<_Value_type,std::_Default_allocator_traits<_Alloc>::void_pointer>*>(std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>>,_Valty,_Nodety)”的引用
          with
          [
              _Ty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Kty=String,
              _Pr=std::less<String>,
              _Alloc=std::allocator<std::string>,
              _Value_type=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Valty=std::basic_string<char,std::char_traits<char>,std::allocator<char>> &,
              _Nodety=std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::_Default_allocator_traits<std::allocator<std::string>>::void_pointer> *
          ]
  d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\xtree(1163): note: 参见对正在编译的函数 模板 实例化“std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>> std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::_Insert_hint<_Value_type&,std::_Tree_node<_Value_type,std::_Default_allocator_traits<_Alloc>::void_pointer>*>(std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>>,_Valty,_Nodety)”的引用
          with
          [
              _Ty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Kty=String,
              _Pr=std::less<String>,
              _Alloc=std::allocator<std::string>,
              _Value_type=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Valty=std::basic_string<char,std::char_traits<char>,std::allocator<char>> &,
              _Nodety=std::_Tree_node<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::_Default_allocator_traits<std::allocator<std::string>>::void_pointer> *
          ]
  d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\xtree(1345): note: 参见对正在编译的函数 模板 实例化“std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>> std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::emplace_hint<_Ty&>(std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>>,_Ty &)”的引用
          with
          [
              _Ty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Kty=String,
              _Pr=std::less<String>,
              _Alloc=std::allocator<std::string>
          ]
  d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\xtree(1345): note: 参见对正在编译的函数 模板 实例化“std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>> std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::emplace_hint<_Ty&>(std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<_Ty>>>,_Ty &)”的引用
          with
          [
              _Ty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Kty=String,
              _Pr=std::less<String>,
              _Alloc=std::allocator<std::string>
          ]
  d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\xtree(1351): note: 参见对正在编译的函数 模板 实例化“void std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::insert<const _Elem*>(_Iter,_Iter)”的引用
          with
          [
              _Kty=String,
              _Pr=std::less<String>,
              _Alloc=std::allocator<std::string>,
              _Elem=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Iter=const std::basic_string<char,std::char_traits<char>,std::allocator<char>> *
          ]
  d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\xtree(1351): note: 参见对正在编译的函数 模板 实例化“void std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::insert<const _Elem*>(_Iter,_Iter)”的引用
          with
          [
              _Kty=String,
              _Pr=std::less<String>,
              _Alloc=std::allocator<std::string>,
              _Elem=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Iter=const std::basic_string<char,std::char_traits<char>,std::allocator<char>> *
          ]
  d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\xtree(1350): note: 编译 类 模板 成员函数 "void std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::insert(std::initializer_list<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>)" 时
          with
          [
              _Kty=String,
              _Pr=std::less<String>,
              _Alloc=std::allocator<std::string>
          ]
  d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\set(178): note: 参见对正在编译的函数 模板 实例化“void std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::insert(std::initializer_list<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>)”的引用
          with
          [
              _Kty=String,
              _Pr=std::less<String>,
              _Alloc=std::allocator<std::string>
          ]
  d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\set(55): note: 参见对正在编译的 类 模板 实例化 "std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>" 的引用
          with
          [
              _Kty=String,
              _Pr=std::less<String>,
              _Alloc=std::allocator<std::string>
          ]
  d:\mylab\collector\aptetwcollector0823-1213\aptetwcollector0823\common.h(101): note: 参见对正在编译的 类 模板 实例化 "std::set<String,std::less<_Kty>,std::allocator<_Ty>>" 的引用
          with
          [
              _Kty=String,
              _Ty=std::string
          ]
d:\mysoft\visualstudio2017\community\vc\tools\msvc\14.16.27023\include\utility(173): warning C4244: “初始化”: 从“_Ty”转换到“_Ty2”，可能丢失数据
          with
          [
              _Ty=ULONG64
          ]
          and
          [
              _Ty2=DWORD
          ]
  正在生成代码
  1 of 24421 functions (<0.1%) were compiled, the rest were copied from previous compilation.
    0 functions were new in current compilation
    1 functions had inline decision re-evaluated but remain unchanged
  已完成代码的生成
  ETWDataCollectorRedesigned.vcxproj -> D:\MyLab\collector\APTETWCollector0823-1213\APTETWCollector0823\ETWDataCollectorRedesigned.exe
