// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etwdata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_etwdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_etwdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_etwdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_etwdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_etwdata_2eproto;
namespace ETWproto {
class EventRecords;
class EventRecordsDefaultTypeInternal;
extern EventRecordsDefaultTypeInternal _EventRecords_default_instance_;
class datad;
class datadDefaultTypeInternal;
extern datadDefaultTypeInternal _datad_default_instance_;
}  // namespace ETWproto
PROTOBUF_NAMESPACE_OPEN
template<> ::ETWproto::EventRecords* Arena::CreateMaybeMessage<::ETWproto::EventRecords>(Arena*);
template<> ::ETWproto::datad* Arena::CreateMaybeMessage<::ETWproto::datad>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ETWproto {

// ===================================================================

class datad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ETWproto.datad) */ {
 public:
  datad();
  virtual ~datad();

  datad(const datad& from);
  datad(datad&& from) noexcept
    : datad() {
    *this = ::std::move(from);
  }

  inline datad& operator=(const datad& from) {
    CopyFrom(from);
    return *this;
  }
  inline datad& operator=(datad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const datad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const datad* internal_default_instance() {
    return reinterpret_cast<const datad*>(
               &_datad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(datad& a, datad& b) {
    a.Swap(&b);
  }
  inline void Swap(datad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline datad* New() const final {
    return CreateMaybeMessage<datad>(nullptr);
  }

  datad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<datad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const datad& from);
  void MergeFrom(const datad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(datad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ETWproto.datad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etwdata_2eproto);
    return ::descriptor_table_etwdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kDFieldNumber = 2,
  };
  // repeated bytes s = 1;
  int s_size() const;
  void clear_s();
  const std::string& s(int index) const;
  std::string* mutable_s(int index);
  void set_s(int index, const std::string& value);
  void set_s(int index, std::string&& value);
  void set_s(int index, const char* value);
  void set_s(int index, const void* value, size_t size);
  std::string* add_s();
  void add_s(const std::string& value);
  void add_s(std::string&& value);
  void add_s(const char* value);
  void add_s(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_s();

  // repeated int64 d = 2;
  int d_size() const;
  void clear_d();
  ::PROTOBUF_NAMESPACE_ID::int64 d(int index) const;
  void set_d(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_d(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      d() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_d();

  // @@protoc_insertion_point(class_scope:ETWproto.datad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> s_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > d_;
  mutable std::atomic<int> _d_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etwdata_2eproto;
};
// -------------------------------------------------------------------

class EventRecords :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ETWproto.EventRecords) */ {
 public:
  EventRecords();
  virtual ~EventRecords();

  EventRecords(const EventRecords& from);
  EventRecords(EventRecords&& from) noexcept
    : EventRecords() {
    *this = ::std::move(from);
  }

  inline EventRecords& operator=(const EventRecords& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventRecords& operator=(EventRecords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventRecords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventRecords* internal_default_instance() {
    return reinterpret_cast<const EventRecords*>(
               &_EventRecords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EventRecords& a, EventRecords& b) {
    a.Swap(&b);
  }
  inline void Swap(EventRecords* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventRecords* New() const final {
    return CreateMaybeMessage<EventRecords>(nullptr);
  }

  EventRecords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventRecords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventRecords& from);
  void MergeFrom(const EventRecords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventRecords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ETWproto.EventRecords";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etwdata_2eproto);
    return ::descriptor_table_etwdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kProviderIDFieldNumber = 4,
    kOpcodeFieldNumber = 5,
    kProcessIDFieldNumber = 6,
    kThreadIDFieldNumber = 7,
    kEventNameFieldNumber = 8,
    kTimestampFieldNumber = 9,
    kCallstackFieldNumber = 10,
  };
  // repeated .ETWproto.datad data = 1;
  int data_size() const;
  void clear_data();
  ::ETWproto::datad* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ETWproto::datad >*
      mutable_data();
  const ::ETWproto::datad& data(int index) const;
  ::ETWproto::datad* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ETWproto::datad >&
      data() const;

  // repeated int64 providerID = 4;
  int providerid_size() const;
  void clear_providerid();
  ::PROTOBUF_NAMESPACE_ID::int64 providerid(int index) const;
  void set_providerid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_providerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      providerid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_providerid();

  // repeated uint32 opcode = 5;
  int opcode_size() const;
  void clear_opcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 opcode(int index) const;
  void set_opcode(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      opcode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_opcode();

  // repeated int32 processID = 6;
  int processid_size() const;
  void clear_processid();
  ::PROTOBUF_NAMESPACE_ID::int32 processid(int index) const;
  void set_processid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_processid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      processid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_processid();

  // repeated int32 threadID = 7;
  int threadid_size() const;
  void clear_threadid();
  ::PROTOBUF_NAMESPACE_ID::int32 threadid(int index) const;
  void set_threadid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_threadid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      threadid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_threadid();

  // repeated bytes eventName = 8;
  int eventname_size() const;
  void clear_eventname();
  const std::string& eventname(int index) const;
  std::string* mutable_eventname(int index);
  void set_eventname(int index, const std::string& value);
  void set_eventname(int index, std::string&& value);
  void set_eventname(int index, const char* value);
  void set_eventname(int index, const void* value, size_t size);
  std::string* add_eventname();
  void add_eventname(const std::string& value);
  void add_eventname(std::string&& value);
  void add_eventname(const char* value);
  void add_eventname(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& eventname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_eventname();

  // repeated int64 timestamp = 9;
  int timestamp_size() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp(int index) const;
  void set_timestamp(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_timestamp();

  // repeated bytes callstack = 10;
  int callstack_size() const;
  void clear_callstack();
  const std::string& callstack(int index) const;
  std::string* mutable_callstack(int index);
  void set_callstack(int index, const std::string& value);
  void set_callstack(int index, std::string&& value);
  void set_callstack(int index, const char* value);
  void set_callstack(int index, const void* value, size_t size);
  std::string* add_callstack();
  void add_callstack(const std::string& value);
  void add_callstack(std::string&& value);
  void add_callstack(const char* value);
  void add_callstack(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& callstack() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_callstack();

  // @@protoc_insertion_point(class_scope:ETWproto.EventRecords)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ETWproto::datad > data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > providerid_;
  mutable std::atomic<int> _providerid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > opcode_;
  mutable std::atomic<int> _opcode_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > processid_;
  mutable std::atomic<int> _processid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > threadid_;
  mutable std::atomic<int> _threadid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> eventname_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > timestamp_;
  mutable std::atomic<int> _timestamp_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> callstack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etwdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// datad

// repeated bytes s = 1;
inline int datad::s_size() const {
  return s_.size();
}
inline void datad::clear_s() {
  s_.Clear();
}
inline const std::string& datad::s(int index) const {
  // @@protoc_insertion_point(field_get:ETWproto.datad.s)
  return s_.Get(index);
}
inline std::string* datad::mutable_s(int index) {
  // @@protoc_insertion_point(field_mutable:ETWproto.datad.s)
  return s_.Mutable(index);
}
inline void datad::set_s(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ETWproto.datad.s)
  s_.Mutable(index)->assign(value);
}
inline void datad::set_s(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ETWproto.datad.s)
  s_.Mutable(index)->assign(std::move(value));
}
inline void datad::set_s(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ETWproto.datad.s)
}
inline void datad::set_s(int index, const void* value, size_t size) {
  s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ETWproto.datad.s)
}
inline std::string* datad::add_s() {
  // @@protoc_insertion_point(field_add_mutable:ETWproto.datad.s)
  return s_.Add();
}
inline void datad::add_s(const std::string& value) {
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ETWproto.datad.s)
}
inline void datad::add_s(std::string&& value) {
  s_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ETWproto.datad.s)
}
inline void datad::add_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ETWproto.datad.s)
}
inline void datad::add_s(const void* value, size_t size) {
  s_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ETWproto.datad.s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
datad::s() const {
  // @@protoc_insertion_point(field_list:ETWproto.datad.s)
  return s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
datad::mutable_s() {
  // @@protoc_insertion_point(field_mutable_list:ETWproto.datad.s)
  return &s_;
}

// repeated int64 d = 2;
inline int datad::d_size() const {
  return d_.size();
}
inline void datad::clear_d() {
  d_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 datad::d(int index) const {
  // @@protoc_insertion_point(field_get:ETWproto.datad.d)
  return d_.Get(index);
}
inline void datad::set_d(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  d_.Set(index, value);
  // @@protoc_insertion_point(field_set:ETWproto.datad.d)
}
inline void datad::add_d(::PROTOBUF_NAMESPACE_ID::int64 value) {
  d_.Add(value);
  // @@protoc_insertion_point(field_add:ETWproto.datad.d)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
datad::d() const {
  // @@protoc_insertion_point(field_list:ETWproto.datad.d)
  return d_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
datad::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:ETWproto.datad.d)
  return &d_;
}

// -------------------------------------------------------------------

// EventRecords

// repeated .ETWproto.datad data = 1;
inline int EventRecords::data_size() const {
  return data_.size();
}
inline void EventRecords::clear_data() {
  data_.Clear();
}
inline ::ETWproto::datad* EventRecords::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ETWproto.EventRecords.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ETWproto::datad >*
EventRecords::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ETWproto.EventRecords.data)
  return &data_;
}
inline const ::ETWproto::datad& EventRecords::data(int index) const {
  // @@protoc_insertion_point(field_get:ETWproto.EventRecords.data)
  return data_.Get(index);
}
inline ::ETWproto::datad* EventRecords::add_data() {
  // @@protoc_insertion_point(field_add:ETWproto.EventRecords.data)
  return data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ETWproto::datad >&
EventRecords::data() const {
  // @@protoc_insertion_point(field_list:ETWproto.EventRecords.data)
  return data_;
}

// repeated int64 providerID = 4;
inline int EventRecords::providerid_size() const {
  return providerid_.size();
}
inline void EventRecords::clear_providerid() {
  providerid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventRecords::providerid(int index) const {
  // @@protoc_insertion_point(field_get:ETWproto.EventRecords.providerID)
  return providerid_.Get(index);
}
inline void EventRecords::set_providerid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  providerid_.Set(index, value);
  // @@protoc_insertion_point(field_set:ETWproto.EventRecords.providerID)
}
inline void EventRecords::add_providerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  providerid_.Add(value);
  // @@protoc_insertion_point(field_add:ETWproto.EventRecords.providerID)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
EventRecords::providerid() const {
  // @@protoc_insertion_point(field_list:ETWproto.EventRecords.providerID)
  return providerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
EventRecords::mutable_providerid() {
  // @@protoc_insertion_point(field_mutable_list:ETWproto.EventRecords.providerID)
  return &providerid_;
}

// repeated uint32 opcode = 5;
inline int EventRecords::opcode_size() const {
  return opcode_.size();
}
inline void EventRecords::clear_opcode() {
  opcode_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EventRecords::opcode(int index) const {
  // @@protoc_insertion_point(field_get:ETWproto.EventRecords.opcode)
  return opcode_.Get(index);
}
inline void EventRecords::set_opcode(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  opcode_.Set(index, value);
  // @@protoc_insertion_point(field_set:ETWproto.EventRecords.opcode)
}
inline void EventRecords::add_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  opcode_.Add(value);
  // @@protoc_insertion_point(field_add:ETWproto.EventRecords.opcode)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EventRecords::opcode() const {
  // @@protoc_insertion_point(field_list:ETWproto.EventRecords.opcode)
  return opcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EventRecords::mutable_opcode() {
  // @@protoc_insertion_point(field_mutable_list:ETWproto.EventRecords.opcode)
  return &opcode_;
}

// repeated int32 processID = 6;
inline int EventRecords::processid_size() const {
  return processid_.size();
}
inline void EventRecords::clear_processid() {
  processid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventRecords::processid(int index) const {
  // @@protoc_insertion_point(field_get:ETWproto.EventRecords.processID)
  return processid_.Get(index);
}
inline void EventRecords::set_processid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  processid_.Set(index, value);
  // @@protoc_insertion_point(field_set:ETWproto.EventRecords.processID)
}
inline void EventRecords::add_processid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  processid_.Add(value);
  // @@protoc_insertion_point(field_add:ETWproto.EventRecords.processID)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EventRecords::processid() const {
  // @@protoc_insertion_point(field_list:ETWproto.EventRecords.processID)
  return processid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EventRecords::mutable_processid() {
  // @@protoc_insertion_point(field_mutable_list:ETWproto.EventRecords.processID)
  return &processid_;
}

// repeated int32 threadID = 7;
inline int EventRecords::threadid_size() const {
  return threadid_.size();
}
inline void EventRecords::clear_threadid() {
  threadid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventRecords::threadid(int index) const {
  // @@protoc_insertion_point(field_get:ETWproto.EventRecords.threadID)
  return threadid_.Get(index);
}
inline void EventRecords::set_threadid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  threadid_.Set(index, value);
  // @@protoc_insertion_point(field_set:ETWproto.EventRecords.threadID)
}
inline void EventRecords::add_threadid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  threadid_.Add(value);
  // @@protoc_insertion_point(field_add:ETWproto.EventRecords.threadID)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EventRecords::threadid() const {
  // @@protoc_insertion_point(field_list:ETWproto.EventRecords.threadID)
  return threadid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EventRecords::mutable_threadid() {
  // @@protoc_insertion_point(field_mutable_list:ETWproto.EventRecords.threadID)
  return &threadid_;
}

// repeated bytes eventName = 8;
inline int EventRecords::eventname_size() const {
  return eventname_.size();
}
inline void EventRecords::clear_eventname() {
  eventname_.Clear();
}
inline const std::string& EventRecords::eventname(int index) const {
  // @@protoc_insertion_point(field_get:ETWproto.EventRecords.eventName)
  return eventname_.Get(index);
}
inline std::string* EventRecords::mutable_eventname(int index) {
  // @@protoc_insertion_point(field_mutable:ETWproto.EventRecords.eventName)
  return eventname_.Mutable(index);
}
inline void EventRecords::set_eventname(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ETWproto.EventRecords.eventName)
  eventname_.Mutable(index)->assign(value);
}
inline void EventRecords::set_eventname(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ETWproto.EventRecords.eventName)
  eventname_.Mutable(index)->assign(std::move(value));
}
inline void EventRecords::set_eventname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  eventname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ETWproto.EventRecords.eventName)
}
inline void EventRecords::set_eventname(int index, const void* value, size_t size) {
  eventname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ETWproto.EventRecords.eventName)
}
inline std::string* EventRecords::add_eventname() {
  // @@protoc_insertion_point(field_add_mutable:ETWproto.EventRecords.eventName)
  return eventname_.Add();
}
inline void EventRecords::add_eventname(const std::string& value) {
  eventname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ETWproto.EventRecords.eventName)
}
inline void EventRecords::add_eventname(std::string&& value) {
  eventname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ETWproto.EventRecords.eventName)
}
inline void EventRecords::add_eventname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  eventname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ETWproto.EventRecords.eventName)
}
inline void EventRecords::add_eventname(const void* value, size_t size) {
  eventname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ETWproto.EventRecords.eventName)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EventRecords::eventname() const {
  // @@protoc_insertion_point(field_list:ETWproto.EventRecords.eventName)
  return eventname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EventRecords::mutable_eventname() {
  // @@protoc_insertion_point(field_mutable_list:ETWproto.EventRecords.eventName)
  return &eventname_;
}

// repeated int64 timestamp = 9;
inline int EventRecords::timestamp_size() const {
  return timestamp_.size();
}
inline void EventRecords::clear_timestamp() {
  timestamp_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventRecords::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:ETWproto.EventRecords.timestamp)
  return timestamp_.Get(index);
}
inline void EventRecords::set_timestamp(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:ETWproto.EventRecords.timestamp)
}
inline void EventRecords::add_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  timestamp_.Add(value);
  // @@protoc_insertion_point(field_add:ETWproto.EventRecords.timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
EventRecords::timestamp() const {
  // @@protoc_insertion_point(field_list:ETWproto.EventRecords.timestamp)
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
EventRecords::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:ETWproto.EventRecords.timestamp)
  return &timestamp_;
}

// repeated bytes callstack = 10;
inline int EventRecords::callstack_size() const {
  return callstack_.size();
}
inline void EventRecords::clear_callstack() {
  callstack_.Clear();
}
inline const std::string& EventRecords::callstack(int index) const {
  // @@protoc_insertion_point(field_get:ETWproto.EventRecords.callstack)
  return callstack_.Get(index);
}
inline std::string* EventRecords::mutable_callstack(int index) {
  // @@protoc_insertion_point(field_mutable:ETWproto.EventRecords.callstack)
  return callstack_.Mutable(index);
}
inline void EventRecords::set_callstack(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ETWproto.EventRecords.callstack)
  callstack_.Mutable(index)->assign(value);
}
inline void EventRecords::set_callstack(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ETWproto.EventRecords.callstack)
  callstack_.Mutable(index)->assign(std::move(value));
}
inline void EventRecords::set_callstack(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  callstack_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ETWproto.EventRecords.callstack)
}
inline void EventRecords::set_callstack(int index, const void* value, size_t size) {
  callstack_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ETWproto.EventRecords.callstack)
}
inline std::string* EventRecords::add_callstack() {
  // @@protoc_insertion_point(field_add_mutable:ETWproto.EventRecords.callstack)
  return callstack_.Add();
}
inline void EventRecords::add_callstack(const std::string& value) {
  callstack_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ETWproto.EventRecords.callstack)
}
inline void EventRecords::add_callstack(std::string&& value) {
  callstack_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ETWproto.EventRecords.callstack)
}
inline void EventRecords::add_callstack(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  callstack_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ETWproto.EventRecords.callstack)
}
inline void EventRecords::add_callstack(const void* value, size_t size) {
  callstack_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ETWproto.EventRecords.callstack)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EventRecords::callstack() const {
  // @@protoc_insertion_point(field_list:ETWproto.EventRecords.callstack)
  return callstack_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EventRecords::mutable_callstack() {
  // @@protoc_insertion_point(field_mutable_list:ETWproto.EventRecords.callstack)
  return &callstack_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ETWproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_etwdata_2eproto
